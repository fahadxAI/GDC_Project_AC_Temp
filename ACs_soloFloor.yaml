blueprint:
  name: Smart Climate Control (Trigger Only)
  description: >
    Minimal AC control logic based on temperature, meant to be triggered externally.
    No internal time conditions. Use external automations to control when it runs.

    Created by Fahad (@fahad) — Naqsh Holding
  domain: automation
  input:
    climate_entity:
      name: Climate Device
      selector:
        entity:
          domain: climate

    temperature_sensor:
      name: Temperature Sensor
      selector:
        entity:
          domain: sensor

    enable_sleep_mode:
      name: Enable Sleep Mode at 5:00 PM
      default: true
      selector:
        boolean:

    sleep_temperature:
      name: Sleep Temperature
      default: 25
      selector:
        number:
          min: 18
          max: 30
          step: 0.5
          unit_of_measurement: "°C"

    critical_temp:
      name: Critical Temperature (Night)
      default: 28
      selector:
        number:
          min: 25
          max: 35
          step: 0.5
          unit_of_measurement: "°C"

    daytime_cool_temp:
      name: Cooling Threshold (Daytime)
      default: 22
      selector:
        number:
          min: 18
          max: 26
          step: 0.5
          unit_of_measurement: "°C"

    lower_limit_temp:
      name: Minimum Temperature Before Cooling Pause
      default: 21
      selector:
        number:
          min: 18
          max: 25
          step: 0.5
          unit_of_measurement: "°C"

mode: single

trigger:
  - platform: numeric_state
    entity_id: !input temperature_sensor
    above: !input critical_temp
    for:
      minutes: 10
    id: critical_high_temp

  - platform: numeric_state
    entity_id: !input temperature_sensor
    above: !input daytime_cool_temp
    for:
      minutes: 10
    id: high_day_temp

  - platform: numeric_state
    entity_id: !input temperature_sensor
    below: !input lower_limit_temp
    for:
      minutes: 10
    id: low_day_temp

  - platform: time
    at: "17:00:00"
    id: time_trigger

condition: []

action:
  - choose:
      # 1. Sleep Mode Activation (Optional)
      - conditions:
          - condition: trigger
            id: time_trigger
          - condition: template
            value_template: "{{ enable_sleep_mode }}"
        sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: !input climate_entity
            data:
              hvac_mode: cool
          - service: climate.set_temperature
            target:
              entity_id: !input climate_entity
            data:
              temperature: !input sleep_temperature

      # 2. Emergency Cooling when temperature exceeds critical_temp
      - conditions:
          - condition: trigger
            id: critical_high_temp
        sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: !input climate_entity
            data:
              hvac_mode: cool
          - service: climate.set_temperature
            target:
              entity_id: !input climate_entity
            data:
              temperature: !input sleep_temperature

      # 3. Cooling when temperature is high
      - conditions:
          - condition: trigger
            id: high_day_temp
        sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: !input climate_entity
            data:
              hvac_mode: cool
          - service: climate.set_temperature
            target:
              entity_id: !input climate_entity
            data:
              temperature: !input daytime_cool_temp

      # 4. Cooling Pause when temperature drops too low
      - conditions:
          - condition: trigger
            id: low_day_temp
        sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: !input climate_entity
            data:
              hvac_mode: auto
